using NUnit.Framework;

namespace LongArithmetics.Tests
{
    [TestFixture]
    public class CalculatorTests
    {
         [Test]
         [TestCase("0000000000000000000000000000000000000000000000000000000000000000002AAAA", 18)]
         [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",328)]
         [TestCase("1", 1)]
         [TestCase("AAAFFFFAAABBBB121231997BBBBA", 112)]
         [TestCase("0", 0)]
         public void TestBitLength(string hex, int len)
         {
             var a = new Number(hex);
             var calculator = new Calculator();
             Assert.AreEqual(len,calculator.BitLength(a));
         }

        [Test]
        [Description("Verifies that bitlen function does not modify the argument passed.")]
        [TestCase("5C353D8D758E06E4DFFB37B5")]
        [TestCase("5C353D8D758E06E4DFFB37B5")]
        [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41")]
        [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45")]
        [TestCase("62D85A0F903DD94865435F59E9785DCF8593C0DB4E73D3A7FBB3EC99B6CD4C3528A93806608DD6F2F1396068E75EEF79D25FA18F36D39F44AAFB26454367B2E2")]
        [TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD")]
        public void BitlengthImmutability(string hex1)
        {
            var number = new Number(hex1);
            var expected = new ulong[number.array.Length];
            number.array.CopyTo(expected, 0);

            var calculator = new Calculator();
            var c = calculator.BitLength(number);

            Assert.That(number.array, Is.EquivalentTo(expected));
        }

        [Test]
        [TestCase("1131A0939A911173", "1800000000000000", - 1)]  
        [TestCase("AAAFFFFAAABBBB121231997BBBBA", "7BBBBA", 1)]
        [TestCase("1", "0", 1)]
        [TestCase("7BBBBA", "AAAFFFFAAABBBB121231997BBBBA", -1)]
        [TestCase("FFFFF000000", "FFFFF000000", 0)]
        [TestCase("00000000000000000000000000000000", "0000000000000001", -1)]
        public void TestCMP(string hex1, string hex2, int sign)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            Calculator calculator = new Calculator();
            Assert.AreEqual(sign, calculator.LongCmp(a, b));
        }

         [Test]
         [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",328,
                   "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
         [TestCase("2", 0, "2")]
         [TestCase("2", 0, "2")]
         [TestCase("1", 1, "2")]
         [TestCase("1", 2, "4")]
         [TestCase("F", 4, "F0")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",32, "FFFFFFFFFFFFFFFF00000000")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",64, "FFFFFFFFFFFFFFFF0000000000000000")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",1 , "1FFFFFFFFFFFFFFFE")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",4, "FFFFFFFFFFFFFFFF0")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",64, "FFFFFFFFFFFFFFFF0000000000000000")]
         [TestCase("0000000000000000FFFFFFFFFFFFFFFF",63, "7FFFFFFFFFFFFFFF8000000000000000")]
         [TestCase("00000000000000000000000000000000FFFFFFFFFFFFFFFF",128,"FFFFFFFFFFFFFFFF00000000000000000000000000000000")]
         public void TestShift(string hex1,int shift, string hex2)
         {
             var a = new Number(hex1);
             var b = new Number(hex2);
             Calculator calculator = new Calculator();
             var c = calculator.ShiftBitsToHigh(a, shift);
             Assert.AreEqual(hex2,c.ToString());
         }

        [Test]
        [Description("Verifies that shifting bits function does not modify the argument passed.")]
        [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF", 1233)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 32)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 64)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 1)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 4)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 64)]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 63)]
        [TestCase("00000000000000000000000000000000FFFFFFFFFFFFFFFF", 128)]
        public void ShiftImmutability(string hex, int shift)
        {
            var number = new Number(hex);
            var expected = new ulong[number.array.Length];
            number.array.CopyTo(expected, 0);

            var calculator = new Calculator();
            var c = calculator.ShiftBitsToHigh(number, shift);

            Assert.That(number.array, Is.EquivalentTo(expected));
        }
       

         [Test]
         [TestCase("0", "0", "0")]
         [TestCase("5", "5", "0")]
         [TestCase("5C353D8D758E06E4DFFB37B5", "0", "5C353D8D758E06E4DFFB37B5")]
         [TestCase("5C353D8D758E06E4DFFB37B5", "1", "5C353D8D758E06E4DFFB37B4")]
         [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41"
                  ,"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
                   "567B1E8281B6CF8D02C4B193A461B04737CB05B0A0C2CDEB1D6EDEC7928731C1AAC6716AE1DE1B8E503DE696E90CF99A8E7E6186D89F6F90360728C725808FD0")]
         [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
                   "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
                   "1FEBF53646D21CFBF70BA22073E0F3C5D4FD9AAD8BBA07284581EDD19D5BC5827A3677F7BFCB2A95737E79AB6F3D63174B94662AD5B9254CF672ACDEA1EAC781")]
         [TestCase("62D85A0F903DD94865435F59E9785DCF8593C0DB4E73D3A7FBB3EC99B6CD4C3528A93806608DD6F2F1396068E75EEF79D25FA18F36D39F44AAFB26454367B2E2",
                   "2820EE434847B161C014E717E54207FFCD348088E58A83BF460679142250F9DD3ACAC62FFC55C6446F9F4782F3F144B8CA072CB149F1876A55A9D117A84F0980",
                   "3AB76BCC47F627E6A52E7842043655CFB85F405268E94FE8B5AD7385947C5257EDDE71D6643810AE819A18E5F36DAAC1085874DDECE217DA5551552D9B18A962")]
         [TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
                   "4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
                   "4B660F1FAE140E1D9E9BC4566C7FFD585E0967074379592BB27F2E21EBF8F61F2B4BC3BDE8D3377C45F4BB57B60CB9178F9CC02784F93D3536AA85B593E65F3E")]
        public void TestLongSub(string hex1, string hex2, string hex3)
         {
             var a = new Number(hex1);
             var b = new Number(hex2);
             var c = new Number(a.array.Length);
             var calculator = new Calculator();
             c.array = calculator.LongSub(a, b);
             Assert.AreEqual(hex3, c.ToString());
         }

        [Test]
        [TestCase("400000000",34)]
        [TestCase("8000000000000000",63)]
        [TestCase("200000000000000000",69)]
        [TestCase("40000000000000000000000000000000000000000000000000000000000",234)]
        public void TestSetBit(string hex1,int num)
        {

            var calculator = new Calculator();
            var a = new Number(hex1);
            var c = new Number(a.array.Length);
            c = calculator.SetBit(c, num);
            Assert.AreEqual(hex1, c.ToString());
        }


        [Test]
        [TestCase("E789B4A323B5037FF14EBAC5A300D44BD78EDEE8708BCB746854B217F08FFCB7",
                  "DD0E39E14873C9C86FA608F7623301989922D162C74D49D6E3C4E209D23884FF",
                  "C7EEBED22186C26BC2E7C43BF06865123381396ABD8A5DD33272825AA0A0BED911B9361077209146687B646C65F9111E4C1C366B9F83ABE28409EB1F43C31649")]
        [TestCase("BE07D5E88D9057721C2CFE1AA683A284DAD9490790A7D1D9F9FECA0C9874A1B9",
                  "6B2C9BED3A0E0F6A01DABA33B2B7E7B7F8ECCC360E6BEC7630645506B5B1A63A",
                  "4F8E637FCE00B5B2B5E8BAA8FB6D4DC1C8EA36B07788FB6886AEA1300F63C2C56D99899A1625C93871243DCD5168EF0BF00D38690D4C4F949DF00807C93399EA")]
        [TestCase("508032BC4DD3EAC6340064FD84562B160FA3678606F1E3CB224EFE493143EF63",
                  "8CD5967C5062F967B44187A68E74EAE8C4FAA54863C441A467A38F1AF4701F6C",
                  "2C4945BB6656BDE22B93AADD99A0CEC2B3C918B2AFDED7C071A18CAD5CD7240D8650C6BE3B4FAB63674CB586BAD222DC4205568ED5CAE7B941C00EC919F5FAC4")]

        [TestCase("5555555555555555555555", "2", 
                  "AAAAAAAAAAAAAAAAAAAAAA")]
        [TestCase("88119363FB9884B0D7F7E5886920606835B368AB56413755E74769571E0092EDEFF602BF2DBEE98FEF81264AC64EF0D0671F1121F7C47FE7FC5522DD570E877B",
                  "78A231ABDBBF314389CD15A55738D74E2A3F16088D33F73F123A98CB29A238B70898C6915E439349E65BEFEEDFDFECE71FFA23226A496D43EBE9B1D1973E1382",
                  "401E729CD8F4F40AE04DAA04159E63734A10896B7E961AD1F1352DA5B812E48A6CC9A07AD4CDA40EC70EFCA1EC04ADA720066258054CE62D25BDAF5AEC70FE77678210884937E56B3C3341C69E0075EF1BBF1D0551ACB692AB09ADAD7656E8B6A6538782C838A7770381D55968442E28FEE9C89888D76664CB426FB5A638ED76")]
        public void TestLongMull(string hex1, string hex2,string hex3)
        {
            var calculator = new Calculator();
            var a = new Number(hex1);
            var b = new Number(hex2);
            var c = calculator.LongMull(a, b);
            Assert.AreEqual(hex3, c.ToString());
        }


        [Test]
        [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
                   "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E29",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E28")]
        [TestCase("101A3F04E4BB34DD41FE0893D0FCF341776CFF41016BB753DBF23B5D6FEBF156B5CE6C511D5E54876559CF6A0BC3CDB93CE883331CE1349F604D789C440E1FBA",
                   "62CFC9B03F18DEB0667A9F46DEA1D1D10AB9720ED7379F544B8C5DC67211EF89",
                   "29B7DCAFF9696345732544724E3C71710551355E18CB3405AF5917CFF3B0F890",
                   "AAA234924090000BAAAAA")]
        [TestCase("53BB3435ACA67DB929F9A681DF91D2CDE3C331E4BFC3B3448B9ECCFEC32F48D4E5C1AD03037D12ECC1588D50E806A962F499CBB712ED9A9740920C41B729E509",
                   "EB1F5EE9866D9FD3DFDD5561CC8BBF20888DB2A2386F6A96948603034689548C",
                   "5B2A852FAEBBB481701FFADF5A8E3AF9DBD8AB896BE19478DCE21CBAC8D903F7",
                   "BBB481701FFADF5")]
        [TestCase("D7FEF8197C133E4A8C68D83AD62AA5B7920CAADA41947129763ADC58C8E99DD40E5C0DF8222D3FE3B432CD6F0F97C7168CF0A2E7911157DDFA94986D21ABC9B6",
                   "E8B40937A59BA0EF9D99D002CF4E73901228C587137C053BAB1887794154E8DD",
                   "ED9EBDB7044D861CDA9A9C0919060D9D697B4BCB8E5316724ACD015FEE346AB9",
                   "1")]
        [TestCase("1131A0939A911173",
                   "3",
                   "5BB358688DB05D1",
                   "0")]
         [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",
                   "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",
                   "1",
                   "0")]
         [TestCase("2",
                   "2",
                   "1",
                   "0")]
         [TestCase("2",
                   "1",
                   "2",
                   "0")]

        public void TestLongDiv(string hex1, string hex2, string hex3, string hex4)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);

            var r = new Number("0");
            Calculator calculator = new Calculator();
            calculator.LengthControl(a, b);
            var q = calculator.LongDiv(a, b, out r);
            Assert.AreEqual(hex3, q.ToString());
            Assert.AreEqual(hex4, r.ToString());
        }



        [Test]
        [TestCase("172CAACEFD9963CF83E9E24EDBAA31A9DAD8A949B465A8BA94F222D0650A0912",
                 "20FDBEC98F4253A607E3D023C260E480A95B6CDBF095165CBC15C4C668D7BFC3",
                 "382A69988CDBB7758BCDB2729E0B162A84341625A4FABF175107E796CDE1C8D5")]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                 "0",
                 "5C353D8D758E06E4DFFB37B5")]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B6")]
        [TestCase("671291C18CC4CEEA9F0878A9ED848F9A471AEFAF99C597B1062E7F5BE278E27444F0B6CD3951821905547367EB45B8C9",
                 "666A82C256DEBA9CA73BE9DFA4736678E37E8B7635C1A6BCF3A67ED7378C79F942A04CA8D8E3AD4D91C1B134641F6B65",
                 "CD7D1483E3A389874644628991F7F6132A997B25CF873E6DF9D4FE331A055C6D8791037612352F669716249C4F65242E")]
        [TestCase("5BD862EF0FA46C2784AB92E310DFF5803D64B32D7A5D8A5D31CA7F3B3D18D8D74C8E9232C7C911D89F2633628E9ABEBFDC6EFFB17B22A49E2BBF1D22CFB3D896",
                 "F04AA7D0B1C958BB6D925534B78C04CCF7F121BC028270F0EBB3362A451D1483EE8E7A55F306DA63A806DC980FD629C6D579BE44EF59CDC7D104EF1617D7D2F",
                 "6ADD0D6C1AC101B33B84B8365C58B5CD0CE3C5493A85B16C4085B29DE16AAA1F8B7779D826F97F7ED9A6A12C0F98215C49C69B95CA18417AA8CF6C14313155C5")]
        public void TestLongAdd(string hex1, string hex2, string hex3)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            Calculator calculator = new Calculator();
            var c = calculator.LongAdd(a, b);
            Assert.AreEqual(hex3,c.ToString());
        }


        
        [Test]
        [TestCase("2", "0", "1")]
        [TestCase("2", "1", "2")]
        [TestCase("2", "3", "8")]
        [TestCase("2", "4", "10")]
        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFF", "0", "1")]
        [TestCase("0", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "0")]
        [TestCase("0", "2", "0")]
      
        public void TestGorner(string hex1, string hex2, string hex3)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            Calculator calculator = new Calculator();
            var c = calculator.Gorner(a, b);
            Assert.AreEqual(hex3, c.ToString());
        }
    }
}